//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `AppFonts.plist`.
    static let appFontsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "AppFonts", pathExtension: "plist")
    /// Resource file `Vazir-Bold-FD.ttf`.
    static let vazirBoldFDTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Vazir-Bold-FD", pathExtension: "ttf")
    /// Resource file `Vazir-FD.ttf`.
    static let vazirFDTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Vazir-FD", pathExtension: "ttf")
    /// Resource file `Vazir-Light-FD.ttf`.
    static let vazirLightFDTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Vazir-Light-FD", pathExtension: "ttf")
    /// Resource file `Vazir-Medium-FD.ttf`.
    static let vazirMediumFDTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Vazir-Medium-FD", pathExtension: "ttf")
    /// Resource file `Vazir-Thin-FD.ttf`.
    static let vazirThinFDTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Vazir-Thin-FD", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "AppFonts", withExtension: "plist")`
    static func appFontsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appFontsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Vazir-Bold-FD", withExtension: "ttf")`
    static func vazirBoldFDTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vazirBoldFDTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Vazir-FD", withExtension: "ttf")`
    static func vazirFDTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vazirFDTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Vazir-Light-FD", withExtension: "ttf")`
    static func vazirLightFDTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vazirLightFDTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Vazir-Medium-FD", withExtension: "ttf")`
    static func vazirMediumFDTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vazirMediumFDTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Vazir-Thin-FD", withExtension: "ttf")`
    static func vazirThinFDTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vazirThinFDTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `Vazir-Bold-FD`.
    static let vazirBoldFD = Rswift.FontResource(fontName: "Vazir-Bold-FD")
    /// Font `Vazir-FD`.
    static let vazirFD = Rswift.FontResource(fontName: "Vazir-FD")
    /// Font `Vazir-Light-FD`.
    static let vazirLightFD = Rswift.FontResource(fontName: "Vazir-Light-FD")
    /// Font `Vazir-Medium-FD`.
    static let vazirMediumFD = Rswift.FontResource(fontName: "Vazir-Medium-FD")
    /// Font `Vazir-Thin-FD`.
    static let vazirThinFD = Rswift.FontResource(fontName: "Vazir-Thin-FD")
    
    /// `UIFont(name: "Vazir-Bold-FD", size: ...)`
    static func vazirBoldFD(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: vazirBoldFD, size: size)
    }
    
    /// `UIFont(name: "Vazir-FD", size: ...)`
    static func vazirFD(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: vazirFD, size: size)
    }
    
    /// `UIFont(name: "Vazir-Light-FD", size: ...)`
    static func vazirLightFD(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: vazirLightFD, size: size)
    }
    
    /// `UIFont(name: "Vazir-Medium-FD", size: ...)`
    static func vazirMediumFD(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: vazirMediumFD, size: size)
    }
    
    /// `UIFont(name: "Vazir-Thin-FD", size: ...)`
    static func vazirThinFD(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: vazirThinFD, size: size)
    }
    
    static func validate() throws {
      if R.font.vazirBoldFD(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Vazir-Bold-FD' could not be loaded, is 'Vazir-Bold-FD.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.vazirThinFD(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Vazir-Thin-FD' could not be loaded, is 'Vazir-Thin-FD.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.vazirMediumFD(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Vazir-Medium-FD' could not be loaded, is 'Vazir-Medium-FD.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.vazirLightFD(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Vazir-Light-FD' could not be loaded, is 'Vazir-Light-FD.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.vazirFD(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Vazir-FD' could not be loaded, is 'Vazir-FD.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `sample`.
    static let sample = _R.storyboard.sample()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "sample", bundle: ...)`
    static func sample(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sample)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.info` struct is generated, and contains static references to 0 localization keys.
    struct info {
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// fa translation: خطا در برقراری ارتباط با سرور
      /// 
      /// Locales: fa, en
      static let error_http_regular = Rswift.StringResource(key: "error_http_regular", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fa", "en"], comment: nil)
      /// fa translation: عدم دسترسی به اینترنت
      /// 
      /// Locales: fa, en
      static let error_internet_connection = Rswift.StringResource(key: "error_internet_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fa", "en"], comment: nil)
      /// fa translation: متن خالی است.
      /// 
      /// Locales: fa, en
      static let text_is_empty = Rswift.StringResource(key: "text_is_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fa", "en"], comment: nil)
      /// fa translation: مثال
      /// 
      /// Locales: fa, en
      static let sample = Rswift.StringResource(key: "sample", tableName: "Localizable", bundle: R.hostingBundle, locales: ["fa", "en"], comment: nil)
      
      /// fa translation: خطا در برقراری ارتباط با سرور
      /// 
      /// Locales: fa, en
      static func error_http_regular(_: Void = ()) -> String {
        return NSLocalizedString("error_http_regular", bundle: R.hostingBundle, comment: "")
      }
      
      /// fa translation: عدم دسترسی به اینترنت
      /// 
      /// Locales: fa, en
      static func error_internet_connection(_: Void = ()) -> String {
        return NSLocalizedString("error_internet_connection", bundle: R.hostingBundle, comment: "")
      }
      
      /// fa translation: متن خالی است.
      /// 
      /// Locales: fa, en
      static func text_is_empty(_: Void = ()) -> String {
        return NSLocalizedString("text_is_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// fa translation: مثال
      /// 
      /// Locales: fa, en
      static func sample(_: Void = ()) -> String {
        return NSLocalizedString("sample", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.sample` struct is generated, and contains static references to 2 localization keys.
    struct sample {
      /// en translation: Submit
      /// 
      /// Locales: en, fa
      static let mjw8HRuhNormalTitle = Rswift.StringResource(key: "mjw-8H-Ruh.normalTitle", tableName: "sample", bundle: R.hostingBundle, locales: ["en", "fa"], comment: nil)
      /// en translation: text
      /// 
      /// Locales: en, fa
      static let vdaM17dvPlaceholder = Rswift.StringResource(key: "vda-m1-7dv.placeholder", tableName: "sample", bundle: R.hostingBundle, locales: ["en", "fa"], comment: nil)
      
      /// en translation: Submit
      /// 
      /// Locales: en, fa
      static func mjw8HRuhNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("mjw-8H-Ruh.normalTitle", tableName: "sample", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: text
      /// 
      /// Locales: en, fa
      static func vdaM17dvPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("vda-m1-7dv.placeholder", tableName: "sample", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try sample.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct sample: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "sample"
      let sampleVC = StoryboardViewControllerResource<SampleViewController>(identifier: "sampleVC")
      
      func sampleVC(_: Void = ()) -> SampleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sampleVC)
      }
      
      static func validate() throws {
        if _R.storyboard.sample().sampleVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sampleVC' could not be loaded from storyboard 'sample' as 'SampleViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
